{
  "list": [
    {
      "key": "Blank",
      "name": "Blank 空页面",
      "description": "Blank block for quick start a umi page develop, with mock, dva, service and antd.",
      "files": {
        "_mock.js": "export default {\n  'GET /api/BLOCK_NAME/text': {\n    text: 'I am a blank block',\n  },\n};\n",
        "index.js": "import React, { Component } from 'react';\nimport { Button } from 'antd';\nimport { connect } from 'dva';\n\nimport styles from './style.less';\n\n@connect(({ BLOCK_NAME_CAMEL_CASE }) => BLOCK_NAME_CAMEL_CASE)\nclass Page extends Component {\n  componentDidMount() {\n    const { dispatch } = this.props;\n    dispatch({\n      type: 'BLOCK_NAME_CAMEL_CASE/fetch',\n    });\n  }\n\n  render() {\n    const { text } = this.props;\n    return (\n      <div className={styles.container}>\n        <Button>{text}</Button>\n      </div>\n    );\n  }\n}\n\nexport default Page;\n",
        "model.js": "import { getText } from './service';\n\nexport default {\n  namespace: 'BLOCK_NAME_CAMEL_CASE',\n  state: {\n    text: 'loading...',\n  },\n\n  effects: {\n    *fetch(_, { call, put }) {\n      const { text } = yield call(getText);\n      yield put({\n        type: 'save',\n        payload: {\n          text,\n        },\n      });\n    },\n  },\n\n  reducers: {\n    save(state, { payload }) {\n      return {\n        ...state,\n        ...payload,\n      };\n    },\n  },\n};\n",
        "service.js": "import request from 'umi-request';\n\nexport function getText() {\n  return request('/api/BLOCK_NAME/text');\n}\n",
        "style.less": ".container {\n  padding: 8px;\n}\n"
      },
      "dependencies": {
        "antd": ">=3",
        "umi-request": "^1.0.0"
      },
      "peerDependencies": {
        "umi": "^3.0.0"
      },
      "tags": [],
      "img": "https://user-images.githubusercontent.com/13595509/77416792-4fbb8980-6dff-11ea-990b-5ebc58277791.png",
      "previewUrl": "",
      "features": ["antd", "dva"],
      "category": "脚手架"
    },
    {
      "key": "UserDashboard",
      "name": "UserDashboard 页",
      "description": "User dashboard example with umi, antd and dva.",
      "dependencies": {
        "antd": ">=3",
        "umi-request": "^1.0.0"
      },
      "peerDependencies": {
        "umi": "^3.0.0"
      },
      "files": {
        "_mock.js": "const PAGE_SIZE = 3;\nlet data = [\n  {\n    id: 1,\n    name: 'Leanne Graham',\n    email: 'Sincere@april.biz',\n    website: 'hildegard.org',\n  },\n  {\n    id: 2,\n    name: 'Ervin Howell',\n    email: 'Shanna@melissa.tv',\n    website: 'anastasia.net',\n  },\n  {\n    id: 3,\n    name: 'Clementine Bauch',\n    email: 'Nathan@yesenia.net',\n    website: 'ramiro.info',\n  },\n  {\n    id: 4,\n    name: 'Patricia Lebsack',\n    email: 'Julianne.OConner@kory.org',\n    website: 'kale.biz',\n  },\n  {\n    id: 5,\n    name: 'Chelsey Dietrich',\n    email: 'Lucio_Hettinger@annie.ca',\n    website: 'demarco.info',\n  },\n  {\n    id: 6,\n    name: 'Mrs. Dennis Schulist',\n    email: 'Karley_Dach@jasper.info',\n    website: 'ola.org',\n  },\n  {\n    id: 7,\n    name: 'Kurtis Weissnat',\n    email: 'Telly.Hoeger@billy.biz',\n    website: 'elvis.io',\n  },\n  {\n    id: 8,\n    name: 'Nicholas Runolfsdottir V',\n    email: 'Sherwood@rosamond.me',\n    website: 'jacynthe.com',\n  },\n  {\n    id: 9,\n    name: 'Glenna Reichert',\n    email: 'Chaim_McDermott@dana.io',\n    website: 'conrad.com',\n  },\n];\n\nfunction uid(len) {\n  len = len || 7;\n  return Math.random()\n    .toString(35)\n    .substr(2, len);\n}\n\nfunction getData(page) {\n  const start = (page - 1) * PAGE_SIZE;\n  return {\n    status: 'success',\n    total: data.length,\n    page,\n    data: data.slice(start, start + 3),\n  };\n}\n\nexport default {\n  'GET /api/BLOCK_NAME': (req, res) => {\n    res.json(getData(parseInt(req.query.page, 10) || 1));\n  },\n  'DELETE /api/BLOCK_NAME/:id': (req, res) => {\n    data = data.filter(item => `${item.id}` !== `${req.params.id}`);\n    res.end('ok');\n  },\n  'PATCH /api/BLOCK_NAME/:id': (req, res) => {\n    data.forEach(item => {\n      if (`${item.id}` === `${req.params.id}`) {\n        Object.assign(item, req.body);\n      }\n    });\n    res.end('ok');\n  },\n  'POST /api/BLOCK_NAME': (req, res) => {\n    data.push({\n      ...req.body,\n      id: uid(),\n    });\n    res.end('ok');\n  },\n};\n",
        "UserModal.js": "import { Component } from 'react';\nimport { Modal, Form, Input } from 'antd';\n\nconst FormItem = Form.Item;\n\nclass UserEditModal extends Component {\n  constructor(props) {\n    super(props);\n    this.state = {\n      visible: false,\n    };\n  }\n\n  showModelHandler = e => {\n    if (e) e.stopPropagation();\n    this.setState({\n      visible: true,\n    });\n  };\n\n  hideModelHandler = () => {\n    this.setState({\n      visible: false,\n    });\n  };\n\n  okHandler = () => {\n    const { onOk } = this.props;\n    this.props.form.validateFields((err, values) => {\n      if (!err) {\n        onOk(values);\n        this.hideModelHandler();\n      }\n    });\n  };\n\n  render() {\n    const { children } = this.props;\n    const { getFieldDecorator } = this.props.form;\n    const { name, email, website } = this.props.record;\n    const formItemLayout = {\n      labelCol: { span: 6 },\n      wrapperCol: { span: 14 },\n    };\n\n    return (\n      <span>\n        <span onClick={this.showModelHandler}>{children}</span>\n        <Modal\n          title=\"Edit User\"\n          visible={this.state.visible}\n          onOk={this.okHandler}\n          onCancel={this.hideModelHandler}\n        >\n          <Form horizontal onSubmit={this.okHandler}>\n            <FormItem {...formItemLayout} label=\"Name\">\n              {getFieldDecorator('name', {\n                initialValue: name,\n              })(<Input />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"Email\">\n              {getFieldDecorator('email', {\n                initialValue: email,\n              })(<Input />)}\n            </FormItem>\n            <FormItem {...formItemLayout} label=\"Website\">\n              {getFieldDecorator('website', {\n                initialValue: website,\n              })(<Input />)}\n            </FormItem>\n          </Form>\n        </Modal>\n      </span>\n    );\n  }\n}\n\nexport default Form.create()(UserEditModal);\n",
        "Users.js": "import { connect, routerRedux } from 'umi';\nimport { Table, Pagination, Popconfirm, Button } from 'antd';\nimport styles from './Users.css';\nimport { PAGE_SIZE } from '../utils/constants';\nimport UserModal from './UserModal';\n\nfunction Users({ dispatch, list: dataSource, loading, total, page: current }) {\n  function deleteHandler(id) {\n    dispatch({\n      type: 'BLOCK_NAME/remove',\n      payload: id,\n    });\n  }\n\n  function pageChangeHandler(page) {\n    dispatch({\n      type: 'BLOCK_NAME/fetch',\n      payload: { page },\n    });\n  }\n\n  function editHandler(id, values) {\n    dispatch({\n      type: 'BLOCK_NAME/patch',\n      payload: { id, values },\n    });\n  }\n\n  function createHandler(values) {\n    dispatch({\n      type: 'BLOCK_NAME/create',\n      payload: values,\n    });\n  }\n\n  const columns = [\n    {\n      title: 'Name',\n      dataIndex: 'name',\n      key: 'name',\n      render: text => <a href=\"\">{text}</a>,\n    },\n    {\n      title: 'Email',\n      dataIndex: 'email',\n      key: 'email',\n    },\n    {\n      title: 'Website',\n      dataIndex: 'website',\n      key: 'website',\n    },\n    {\n      title: 'Operation',\n      key: 'operation',\n      render: (text, record) => (\n        <span className={styles.operation}>\n          <UserModal record={record} onOk={editHandler.bind(null, record.id)}>\n            <a>Edit</a>\n          </UserModal>\n          <Popconfirm title=\"Confirm to delete?\" onConfirm={deleteHandler.bind(null, record.id)}>\n            <a href=\"\">Delete</a>\n          </Popconfirm>\n        </span>\n      ),\n    },\n  ];\n\n  return (\n    <div className={styles.normal}>\n      <div>\n        <div className={styles.create}>\n          <UserModal record={{}} onOk={createHandler}>\n            <Button type=\"primary\">Create User</Button>\n          </UserModal>\n        </div>\n        <Table\n          loading={loading}\n          columns={columns}\n          dataSource={dataSource}\n          rowKey={record => record.id}\n          pagination={false}\n        />\n        <Pagination\n          className=\"ant-table-pagination\"\n          total={total}\n          current={current}\n          pageSize={PAGE_SIZE}\n          onChange={pageChangeHandler}\n        />\n      </div>\n    </div>\n  );\n}\n\nfunction mapStateToProps(state) {\n  const { list, total, page } = state['BLOCK_NAME'];\n  return {\n    list,\n    total,\n    page,\n    loading: state.loading.models['BLOCK_NAME'],\n  };\n}\n\nexport default connect(mapStateToProps)(Users);\n",
        "index.js": "import { Component } from 'react';\nimport { connect } from 'umi';\nimport Users from './components/Users';\n\nclass BLOCK_NAME_CAMEL_CASE extends Component {\n  componentDidMount() {\n    this.props.dispatch({\n      type: 'BLOCK_NAME/fetch',\n      payload: {\n        page: 1,\n      },\n    });\n  }\n\n  render() {\n    return (\n      <div>\n        <Users />\n      </div>\n    );\n  }\n}\n\nexport default connect()(BLOCK_NAME_CAMEL_CASE);\n",
        "model.js": "import * as usersService from './service';\n\nexport default {\n  namespace: 'BLOCK_NAME',\n  state: {\n    list: [],\n    total: null,\n    page: null,\n  },\n  reducers: {\n    save(state, { payload: { data: list, total, page } }) {\n      return { ...state, list, total, page };\n    },\n  },\n  effects: {\n    *fetch({ payload: { page = 1 } }, { call, put }) {\n      const { data, total, page: currentPage } = yield call(usersService.fetch, { page });\n      yield put({\n        type: 'save',\n        payload: {\n          data,\n          total,\n          page: currentPage,\n        },\n      });\n    },\n    *remove({ payload: id }, { call, put, select }) {\n      yield call(usersService.remove, id);\n      const page = yield select(state => state['BLOCK_NAME'].page);\n      yield put({ type: 'fetch', payload: { page } });\n    },\n    *patch({ payload: { id, values } }, { call, put, select }) {\n      yield call(usersService.patch, id, values);\n      const page = yield select(state => state['BLOCK_NAME'].page);\n      yield put({ type: 'fetch', payload: { page } });\n    },\n    *create({ payload: values }, { call, put, select }) {\n      yield call(usersService.create, values);\n      const page = yield select(state => state['BLOCK_NAME'].page);\n      yield put({ type: 'fetch', payload: { page } });\n    },\n  },\n};\n",
        "service.js": "import request from 'umi-request';\n\nconst API_PREFIX = `/api/BLOCK_NAME`;\n\nexport function fetch({ page = 1 }) {\n  return request(`${API_PREFIX}?page=${page}`);\n}\n\nexport function remove(id) {\n  return request(`${API_PREFIX}/${id}`, {\n    method: 'DELETE',\n  });\n}\n\nexport function patch(id, values) {\n  // TODO:\n  // use umi-request after the issue is closed\n  // https://github.com/umijs/umi-request/issues/5\n  return window.fetch(`${API_PREFIX}/${id}`, {\n    method: 'PATCH',\n    headers: {\n      'Content-Type': 'application/json',\n    },\n    body: JSON.stringify(values),\n  });\n}\n\nexport function create(values) {\n  return request(API_PREFIX, {\n    method: 'POST',\n    data: values,\n  });\n}\n",
        "constants.js": "export const PAGE_SIZE = 3;\n"
      },
      "tags": [],
      "img": "https://user-images.githubusercontent.com/13595509/77416861-67930d80-6dff-11ea-9a64-06590ee54393.png",
      "previewUrl": "",
      "features": ["antd", "dva"],
      "category": "表格"
    }
  ]
}
